MANAGEMENT,
NEGATIV)) == TRUE ~ 0,
TRUE ~ 1)
) %>%
dplyr::ungroup()
result <- species_target_quad %>%
dplyr::full_join(.,
species_target_site_ID,
by = c("SITECODE", "POLE")) %>%
dplyr::full_join(.,
last_targeted_mon_quad,
by = c("SITECODE", "POLE")) %>%
dplyr::full_join(.,
last_find_quad,
by = c("SITECODE", "POLE"))
result
}
# RESULTS LEP ----
# |-Phengaris nausithous ----
sites_phenau <- sites_subjects %>%
filter(feature_code == 6179)
hu_phenau <- ins_lep_1_quad_eval(sites_phenau[1,7], sites_phenau[1,1])
results_quad_phenau <- matrix(NA, 1, ncol(hu_phenau)) %>%
dplyr::as_tibble()
colnames(results_quad_phenau) <- colnames(hu_phenau)
for(i in 1:nrow(sites_phenau)) {
results_quad_phenau <- dplyr::bind_rows(results_quad_phenau,
as.data.frame(ins_lep_1_quad_eval("Phengaris nausithous", sites_phenau[i,1])))
}
results_quad_phenau <- results_quad_phenau[c(2:nrow(results_quad_phenau)),]
View(results_quad_phenau)
# FUNKCE LEP ----
ins_lep_1_quad_eval <- function(species_code, evl_site) {
# FIND LEVEL
species_target_find <- species %>%
filter(PRESNOST < 500) %>%
filter(SITECODE == evl_site) %>%
filter(DRUH == species_code) %>%
mutate(
PRESENCE_find = dplyr::case_when(NEGATIVNI == 0 ~ 1,
NEGATIVNI == 1 ~ 0,
POCET > 0 ~ 1,
POCET == 0 ~ 0),
MOWING_TIME_find = dplyr::case_when(grepl("<sec_nacasovani>ne", STRUKT_POZN, ignore.case = TRUE) ~ 0,
grepl("<sec_nacasovani>ano", STRUKT_POZN, ignore.case = TRUE) ~ 1),
MOWING_METHOD_find = dplyr::case_when(grepl("<sec_celoplosna>ano", STRUKT_POZN, ignore.case = TRUE) ~ 0,
grepl("<sec_celoplosna>ne", STRUKT_POZN, ignore.case = TRUE) ~ 1),
PLANTS_val = readr::parse_character(gsub(".*<STA_PRITOMNOSTROSTLIN>|</STA_PRITOMNOSTROSTLIN>.*", "", STRUKT_POZN)),
PLANTS_find = dplyr::case_when(grepl("<STA_PRITOMNOSTROSTLIN>žádné", STRUKT_POZN, ignore.case = TRUE) ~ 0,
grepl("<toten_pritomnost>žádné", STRUKT_POZN, ignore.case = TRUE) ~ 0,
grepl("<STA_PRITOMNOSTROSTLIN>jednotlivě", STRUKT_POZN, ignore.case = TRUE) ~ 1,
grepl("<toten_pritomnost>jednotlivě", STRUKT_POZN, ignore.case = TRUE) ~ 1,
grepl("<STA_PRITOMNOSTROSTLIN>hojně", STRUKT_POZN, ignore.case = TRUE) ~ 1,
grepl("<toten_pritomnost>hojně", STRUKT_POZN, ignore.case = TRUE) ~ 1,
grepl("<STA_PRITOMNOSTROSTLIN>dominantně", STRUKT_POZN, ignore.case = TRUE) ~ 1,
grepl("<toten_pritomnost>dominantně", STRUKT_POZN, ignore.case = TRUE) ~ 1,),
TARGET_MON_find = dplyr::case_when(ZDROJ == "Kolektiv autorů (2017) Monitoring totenových modrásků. Monitoring druhů ČR. AOPK ČR." ~ 1,
ZDROJ == "Kolektiv autorů (2018) Monitoring totenových modrásků. Monitoring druhů ČR. AOPK ČR." ~ 1,
ZDROJ == "Kolektiv autorů (2019) Monitoring totenových modrásků. Monitoring druhů ČR. AOPK ČR." ~ 1,
ZDROJ == "Kolektiv autorů (2020) Monitoring totenových modrásků. Monitoring druhů ČR. AOPK ČR." ~ 1,
ZDROJ == "Kolektiv autorů (2021) Monitoring totenových modrásků. Monitoring druhů ČR. AOPK ČR." ~ 1,
ZDROJ == "Kolektiv autorů (2020) Monitoring motýlů. Monitoring druhů ČR. AOPK ČR." ~ 1,
ZDROJ == "Kolektiv autorů (2021) Monitoring motýlů. Monitoring druhů ČR. AOPK ČR." ~ 1,
ZDROJ == "Sledování stavu EVL - IPLife" ~ 1,
TRUE ~ 0)
) %>%
dplyr::mutate(
MANAGEMENT_find = dplyr::case_when(MOWING_TIME_find == 1 &
MOWING_METHOD_find == 1 ~ 1,
MOWING_TIME_find == 0 |
MOWING_METHOD_find == 0 ~ 0),
DESTRUCT_find = dplyr::case_when(grepl(paste(c("vysazování lesů",
"odvodňování, meliorace",
"zalesňování bezlesí",
"změna zemědělského využívání půdy"),
collapse = "|"),
STRUKT_POZN,
ignore.case = TRUE) ~ 0,
TARGET_MON_find == 1 ~ 1),
THREATS_val = readr::parse_character(gsub(".*<vliv>|</vliv>.*", "", STRUKT_POZN)),
THREATS_find = dplyr::case_when(grepl("žádný", STRUKT_POZN) ~ 1,
grepl("<vliv>", STRUKT_POZN) &
TARGET_MON_find == 1 ~ 0,
TARGET_MON_find == 1 ~ 1),
THREATS_NUM_find = stringr::str_count(STRUKT_POZN, ",")
) %>%
dplyr::group_by(ID_ND_NALEZ) %>%
dplyr::mutate(
OVERALL_find = sum(PRESENCE_find,
PLANTS_find,
MANAGEMENT_find,
DESTRUCT_find,
THREATS_find,
na.rm = TRUE)
) %>%
dplyr::ungroup()
# SITE LEVEL
species_target_sites <- species_target_find %>%
dplyr::group_by(POLE) %>%
dplyr::arrange(desc(TARGET_MON_find),
desc(YEAR),
desc(OVERALL_find),
desc(DATE)) %>%
dplyr::slice(1) %>%
dplyr::summarise(
PRESENCE_site = unique(PRESENCE_find),
PLANTS_site = unique(PLANTS_find),
MANAGEMENT_site = unique(MANAGEMENT_find),
DESTRUCT_site = unique(DESTRUCT_find),
THREATS_val = unique(THREATS_val),
THREATS_site = unique(THREATS_find),
OVERALL_site = unique(OVERALL_find),
TARGET_MON_site = unique(TARGET_MON_find),
DATE = unique(DATE)
) %>%
dplyr::ungroup()
species_target_site_ID <- species_target_find %>%
dplyr::group_by(POLE) %>%
dplyr::arrange(desc(TARGET_MON_find),
desc(YEAR),
desc(OVERALL_find),
desc(DATE)) %>%
dplyr::slice(1) %>%
dplyr::summarise(SITECODE = evl_site,
ID_ND_NALEZ = unique(ID_ND_NALEZ)) %>%
dplyr::ungroup() %>%
dplyr::select(SITECODE, POLE, ID_ND_NALEZ)
last_targeted_mon_quad <- species_target_find %>%
dplyr::group_by(POLE) %>%
dplyr::filter(TARGET_MON_find == 1) %>%
dplyr::filter(DATE >= 2021 - 6) %>%
dplyr::summarise(SITECODE = evl_site,
LAST_TARGET_MON = max(DATE)) %>%
dplyr::ungroup() %>%
dplyr::select(SITECODE, POLE, LAST_TARGET_MON)
last_find_quad <- species_target_find %>%
dplyr::group_by(POLE) %>%
dplyr::filter(PRESENCE_find == 1) %>%
dplyr::summarise(SITECODE = evl_site,
LAST_FIND = max(DATE)) %>%
dplyr::ungroup() %>%
dplyr::select(SITECODE, POLE, LAST_FIND)
species_target_quad <- species_target_sites %>%
dplyr::filter(DATE >= 2021 - 6) %>%
dplyr::group_by(POLE) %>%
dplyr::summarise(
SITECODE = evl_site,
NAZEV = find_evl_CODE_TO_NAME(evl_site),
DRUH = species_code,
FEATURE_CODE = find_N2K_feature_code(species_code),
POLE = unique(POLE),
PRESENCE = dplyr::case_when(max(na.omit(PRESENCE_site)) == 1 ~ 1,
max(na.omit(PRESENCE_site)) == 0 ~ 0),
ROSTLINY = mean(na.omit(PLANTS_site)),
LIKVIDACE = mean(na.omit(DESTRUCT_site)),
NEGATIV_LIST = dplyr::case_when(max(TARGET_MON_site) == 0 ~ NA_character_,
mean(na.omit(THREATS_site)) == 0 ~ unique(THREATS_val),
TRUE ~ "žádné"),
NEGATIV = mean(na.omit(THREATS_site)),
MANAGEMENT = mean(na.omit(MANAGEMENT_site)),
TARGET_MON = dplyr::case_when(max(TARGET_MON_site) == 1 ~ 1,
max(TARGET_MON_site) == 0 ~ 0),
OVERALL = mean(na.omit(OVERALL_site)),
SUFFICIENT = dplyr::case_when(PRESENCE == 0 ~ 0,
OVERALL == 5 ~ 1,
OVERALL < 5 & PRESENCE > 0 ~ 0.5),
EVAL = dplyr::case_when(is.na(sum(PRESENCE,
ROSTLINY,
LIKVIDACE,
MANAGEMENT,
NEGATIV)) == TRUE ~ 0,
TRUE ~ 1)
) %>%
dplyr::ungroup()
result <- species_target_quad %>%
dplyr::full_join(.,
species_target_site_ID,
by = c("SITECODE", "POLE")) %>%
dplyr::full_join(.,
last_targeted_mon_quad,
by = c("SITECODE", "POLE")) %>%
dplyr::full_join(.,
last_find_quad,
by = c("SITECODE", "POLE"))
result
}
# RESULTS LEP ----
# |-Phengaris nausithous ----
sites_phenau <- sites_subjects %>%
filter(feature_code == 6179)
hu_phenau <- ins_lep_1_quad_eval(sites_phenau[1,7], sites_phenau[1,1])
results_quad_phenau <- matrix(NA, 1, ncol(hu_phenau)) %>%
dplyr::as_tibble()
colnames(results_quad_phenau) <- colnames(hu_phenau)
for(i in 1:nrow(sites_phenau)) {
results_quad_phenau <- dplyr::bind_rows(results_quad_phenau,
as.data.frame(ins_lep_1_quad_eval("Phengaris nausithous", sites_phenau[i,1])))
}
results_quad_phenau <- results_quad_phenau[c(2:nrow(results_quad_phenau)),]
# |-Phengaris sp. ----
lep_1_quad_dt <- DT::datatable(results_quad_lep_1 %>%
dplyr::group_by(SITECODE, POLE, FEATURE_CODE) %>%
dplyr::mutate(EVAL = dplyr::case_when(is.na(sum(PRESENCE,
ROSTLINY,
LIKVIDACE,
NEGATIV,
MANAGEMENT)) == TRUE ~ 0,
TRUE ~ 1)) %>%
dplyr::ungroup() %>%
dplyr::mutate(ROW_COL = dplyr::case_when(PRESENCE == 0 ~ 0,
EVAL == 0 ~ -1,
SUFFICIENT == 1 ~ 1,
SUFFICIENT < 1 &
PRESENCE > 0 ~ 0.5),
PRESENCE_COL = dplyr::case_when(PRESENCE >= 0.5 ~ 1,
PRESENCE < 0.5 &
PRESENCE > 0 ~ 0.5,
PRESENCE == 0 ~ 0,
is.na(PRESENCE) == TRUE ~ -1),
ROSTLINY_COL = dplyr::case_when(ROSTLINY >= 0.5 ~ 1,
ROSTLINY < 0.5~ 0,
is.na(ROSTLINY) == TRUE ~ -1),
LIKVIDACE_COL = dplyr::case_when(LIKVIDACE >= 0.5 ~ 1,
LIKVIDACE < 0.5  ~ 0,
is.na(LIKVIDACE) == TRUE ~ -1),
MANAGEMENT_COL = dplyr::case_when(MANAGEMENT >= 0.5 ~ 1,
MANAGEMENT < 0.5  ~ 0,
is.na(MANAGEMENT) == TRUE ~ -1),
NEGATIV_COL = dplyr::case_when(NEGATIV >= 0.5 ~ 1,
NEGATIV < 0.5  ~ 0,
is.na(NEGATIV) == TRUE ~ -1)) %>%
dplyr::mutate(across(c(PRESENCE,
ROSTLINY,
LIKVIDACE,
MANAGEMENT,
NEGATIV,
OVERALL,
SUFFICIENT),
round, 3)) %>%
as.data.frame(),
extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
initComplete = JS(
"function(settings, json) {",
"$('body').css({'font-family': 'Calibri'});",
"}"
),
columnDefs = list(list(targets = c(18:23), visible = FALSE))),
rownames = FALSE,
filter = "top") %>%
DT::formatStyle('POLE', 'ROW_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green"))) %>%
DT::formatStyle('SITECODE', 'ROW_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green"))) %>%
DT::formatStyle('NAZEV', 'ROW_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green"))) %>%
DT::formatStyle('FEATURE_CODE', 'ROW_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green"))) %>%
DT::formatStyle('DRUH', 'ROW_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green"))) %>%
DT::formatStyle('PRESENCE', 'PRESENCE_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green"))) %>%
DT::formatStyle('ROSTLINY', 'ROSTLINY_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green"))) %>%
DT::formatStyle('LIKVIDACE', 'LIKVIDACE_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green"))) %>%
DT::formatStyle('NEGATIV_LIST', 'NEGATIV_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green"))) %>%
DT::formatStyle('NEGATIV', 'NEGATIV_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green"))) %>%
DT::formatStyle('MANAGEMENT', 'MANAGEMENT_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green"))) %>%
DT::formatStyle('TARGET_MON',
backgroundColor = styleEqual(c(0, 1),
c("grey", "green"))) %>%
DT::formatStyle('SUFFICIENT','ROW_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green"))) %>%
DT::formatStyle('OVERALL', 'ROW_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green")))
lep_1_quad_dt
# |-Phengaris teleius ----
sites_phetel <- sites_subjects %>%
filter(feature_code == 6177)
hu_phetel <- ins_lep_1_quad_eval(sites_phetel[1,7], sites_phetel[1,1])
results_quad_phetel <- matrix(NA, 1, ncol(hu_phetel)) %>%
dplyr::as_tibble()
colnames(results_quad_phetel) <- colnames(hu_phetel)
for(i in 1:nrow(sites_phetel)) {
results_quad_phetel <- dplyr::bind_rows(results_quad_phetel,
as.data.frame(ins_lep_1_quad_eval(sites_phetel[1,7], sites_phetel[i,1])))
}
results_quad_phetel <- results_quad_phetel[c(2:nrow(results_quad_phetel)),]
write.csv(results_quad_phetel,
"C:/Users/jonas.gaigr/N2K.CZ/results/results_phetel_quad.csv",
row.names = FALSE,
fileEncoding = "UTF-8")
#|-lep_1_quad_results ----
results_quad_lep_1 <- dplyr::bind_rows(results_quad_phenau,
results_quad_phetel)
# |-Phengaris sp. ----
lep_1_quad_dt <- DT::datatable(results_quad_lep_1 %>%
dplyr::group_by(SITECODE, POLE, FEATURE_CODE) %>%
dplyr::mutate(EVAL = dplyr::case_when(is.na(sum(PRESENCE,
ROSTLINY,
LIKVIDACE,
NEGATIV,
MANAGEMENT)) == TRUE ~ 0,
TRUE ~ 1)) %>%
dplyr::ungroup() %>%
dplyr::mutate(ROW_COL = dplyr::case_when(PRESENCE == 0 ~ 0,
EVAL == 0 ~ -1,
SUFFICIENT == 1 ~ 1,
SUFFICIENT < 1 &
PRESENCE > 0 ~ 0.5),
PRESENCE_COL = dplyr::case_when(PRESENCE >= 0.5 ~ 1,
PRESENCE < 0.5 &
PRESENCE > 0 ~ 0.5,
PRESENCE == 0 ~ 0,
is.na(PRESENCE) == TRUE ~ -1),
ROSTLINY_COL = dplyr::case_when(ROSTLINY >= 0.5 ~ 1,
ROSTLINY < 0.5~ 0,
is.na(ROSTLINY) == TRUE ~ -1),
LIKVIDACE_COL = dplyr::case_when(LIKVIDACE >= 0.5 ~ 1,
LIKVIDACE < 0.5  ~ 0,
is.na(LIKVIDACE) == TRUE ~ -1),
MANAGEMENT_COL = dplyr::case_when(MANAGEMENT >= 0.5 ~ 1,
MANAGEMENT < 0.5  ~ 0,
is.na(MANAGEMENT) == TRUE ~ -1),
NEGATIV_COL = dplyr::case_when(NEGATIV >= 0.5 ~ 1,
NEGATIV < 0.5  ~ 0,
is.na(NEGATIV) == TRUE ~ -1)) %>%
dplyr::mutate(across(c(PRESENCE,
ROSTLINY,
LIKVIDACE,
MANAGEMENT,
NEGATIV,
OVERALL,
SUFFICIENT),
round, 3)) %>%
as.data.frame(),
extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
initComplete = JS(
"function(settings, json) {",
"$('body').css({'font-family': 'Calibri'});",
"}"
),
columnDefs = list(list(targets = c(18:23), visible = FALSE))),
rownames = FALSE,
filter = "top") %>%
DT::formatStyle('POLE', 'ROW_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green"))) %>%
DT::formatStyle('SITECODE', 'ROW_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green"))) %>%
DT::formatStyle('NAZEV', 'ROW_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green"))) %>%
DT::formatStyle('FEATURE_CODE', 'ROW_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green"))) %>%
DT::formatStyle('DRUH', 'ROW_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green"))) %>%
DT::formatStyle('PRESENCE', 'PRESENCE_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green"))) %>%
DT::formatStyle('ROSTLINY', 'ROSTLINY_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green"))) %>%
DT::formatStyle('LIKVIDACE', 'LIKVIDACE_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green"))) %>%
DT::formatStyle('NEGATIV_LIST', 'NEGATIV_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green"))) %>%
DT::formatStyle('NEGATIV', 'NEGATIV_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green"))) %>%
DT::formatStyle('MANAGEMENT', 'MANAGEMENT_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green"))) %>%
DT::formatStyle('TARGET_MON',
backgroundColor = styleEqual(c(0, 1),
c("grey", "green"))) %>%
DT::formatStyle('SUFFICIENT','ROW_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green"))) %>%
DT::formatStyle('OVERALL', 'ROW_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green")))
lep_1_sci_dt <- DT::datatable(results_sci_lep_1 %>%
dplyr::group_by(SITECODE, FEATURE_CODE) %>%
dplyr::mutate(EVAL = dplyr::case_when(is.na(sum(PRESENCE,
ROSTLINY,
LIKVIDACE,
NEGATIV,
MANAGEMENT,
HABITAT)) == TRUE ~ 0,
TRUE ~ 1)) %>%
dplyr::ungroup() %>%
dplyr::mutate(ROW_COL = dplyr::case_when(PRESENCE == 0 ~ 0,
EVAL == 0 ~ -1,
SUFFICIENT == 1 ~ 1,
SUFFICIENT < 1 &
PRESENCE > 0 ~ 0.5),
PRESENCE_COL = dplyr::case_when(PRESENCE >= 0.5 ~ 1,
PRESENCE < 0.5 &
PRESENCE > 0 ~ 0.5,
PRESENCE == 0 ~ 0,
is.na(PRESENCE) == TRUE ~ -1),
ROSTLINY_COL = dplyr::case_when(ROSTLINY >= 0.5 ~ 1,
ROSTLINY < 0.5~ 0,
is.na(ROSTLINY) == TRUE ~ -1),
LIKVIDACE_COL = dplyr::case_when(LIKVIDACE >= 0.5 ~ 1,
LIKVIDACE < 0.5  ~ 0,
is.na(LIKVIDACE) == TRUE ~ -1),
MANAGEMENT_COL = dplyr::case_when(MANAGEMENT >= 0.5 ~ 1,
MANAGEMENT < 0.5  ~ 0,
is.na(MANAGEMENT) == TRUE ~ -1),
HABITAT_COL = dplyr::case_when(HABITAT >= 0.5 ~ 1,
HABITAT < 0.5  ~ 0,
is.na(HABITAT) == TRUE ~ -1),
NEGATIV_COL = dplyr::case_when(NEGATIV >= 0.5 ~ 1,
NEGATIV < 0.5  ~ 0,
is.na(NEGATIV) == TRUE ~ -1)) %>%
dplyr::mutate(across(c(PRESENCE,
ROSTLINY,
LIKVIDACE,
MANAGEMENT,
HABITAT_PERC,
NEGATIV,
OVERALL,
SUFFICIENT),
round, 3)) %>%
as.data.frame(),
extensions = 'Buttons',
options = list(
dom = 'Bfrtip',
buttons = c('csv', 'excel'),
initComplete = JS(
"function(settings, json) {",
"$('body').css({'font-family': 'Calibri'});",
"}"
),
columnDefs = list(list(targets = c(15:21), visible = FALSE))),
rownames = FALSE,
filter = "top") %>%
DT::formatStyle('SITECODE', 'ROW_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green"))) %>%
DT::formatStyle('NAZEV', 'ROW_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green"))) %>%
DT::formatStyle('FEATURE_CODE', 'ROW_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green"))) %>%
DT::formatStyle('DRUH', 'ROW_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green"))) %>%
DT::formatStyle('PRESENCE', 'PRESENCE_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green"))) %>%
DT::formatStyle('ROSTLINY', 'ROSTLINY_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green"))) %>%
DT::formatStyle('LIKVIDACE', 'LIKVIDACE_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green"))) %>%
DT::formatStyle('NEGATIV', 'NEGATIV_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green"))) %>%
DT::formatStyle('MANAGEMENT', 'MANAGEMENT_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green"))) %>%
DT::formatStyle('HABITAT', 'HABITAT_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green"))) %>%
DT::formatStyle('HABITAT_PERC', 'HABITAT_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green"))) %>%
DT::formatStyle('OVERALL', 'ROW_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green"))) %>%
DT::formatStyle('SUFFICIENT', 'ROW_COL',
backgroundColor = styleEqual(c(-1, 0, 0.5, 1),
c("grey", "red", "orange", "green")))
lep_1_quad_dt
install.packages("taxizise")
install.packages("taxizize")
install.packages("taxize")
remotes::install_github("ropensci/taxize")
install.packages(c("bdsmatrix", "boot", "broom", "bslib", "callr", "class", "classInt", "cli", "clue", "cluster", "codetools", "collapse", "covr", "DBI", "dbplyr", "dplyr", "DT", "dtplyr", "e1071", "evaluate", "exactextractr", "farver", "FNN", "fontawesome", "forcats", "foreign", "future", "generics", "gert", "ggforce", "globals", "googlesheets4", "haven", "Hmisc", "hms", "htmltools", "httr", "checkmate", "interp", "KernSmooth", "knitr", "lattice", "MASS", "Matrix", "mgcv", "modelr", "nlme", "nnet", "openssl", "parallelly", "pdftools", "pillar", "plm", "processx", "proxy", "ps", "qpdf", "raster", "rbibutils", "Rcpp", "Rdpack", "readxl", "reprex", "rgdal", "rlang", "rmarkdown", "RNetCDF", "roxygen2", "rpart", "rstudioapi", "rvest", "s2", "sass", "scales", "sf", "shiny", "sp", "spatial", "spatstat.core", "spatstat.utils", "stars", "stringi", "stringr", "survival", "terra", "testthat", "tibble", "tidyverse", "tinytex", "tweenr", "viridisLite", "xfun", "XML"))
install.packages(c("bdsmatrix", "boot", "broom", "bslib", "callr", "class", "classInt", "cli", "clue", "cluster", "codetools", "collapse", "covr", "DBI", "dbplyr", "dplyr", "DT", "dtplyr", "e1071", "evaluate", "exactextractr", "farver", "FNN", "fontawesome", "forcats", "foreign", "future", "generics", "gert", "ggforce", "globals", "googlesheets4", "haven", "Hmisc", "hms", "htmltools", "httr", "checkmate", "interp", "KernSmooth", "knitr", "lattice", "MASS", "Matrix", "mgcv", "modelr", "nlme", "nnet", "openssl", "parallelly", "pdftools", "pillar", "plm", "processx", "proxy", "ps", "qpdf", "raster", "rbibutils", "Rcpp", "Rdpack", "readxl", "reprex", "rgdal", "rlang", "rmarkdown", "RNetCDF", "roxygen2", "rpart", "rstudioapi", "rvest", "s2", "sass", "scales", "sf", "shiny", "sp", "spatial", "spatstat.core", "spatstat.utils", "stars", "stringi", "stringr", "survival", "terra", "testthat", "tibble", "tidyverse", "tinytex", "tweenr", "viridisLite", "xfun", "XML"))
